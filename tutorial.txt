package CSCI548;

import info.aduna.iteration.Iterations;

import org.openrdf.model.Model;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.impl.LinkedHashModel;
import org.openrdf.model.vocabulary.FOAF;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.repository.Repository;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.RepositoryResult;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.sparql.SPARQLConnection;
import org.openrdf.rio.RDFFormat;
import org.openrdf.rio.RDFHandlerException;
import org.openrdf.rio.Rio;
import org.openrdf.sail.memory.MemoryStore;

public class Homework7 
{

	public static void main(String[] args) throws RepositoryException, RDFHandlerException 
	{
		Repository repo = (Repository) new SailRepository(new MemoryStore());
		repo.initialize();
		
		org.openrdf.model.ValueFactory f = repo.getValueFactory();
		String namespace = "http://example.org";
		
		URI pramod  = f.createURI(namespace,"pramod");
		
		RepositoryConnection con = repo.getConnection();
		try
		{
			//Adding data to the repository
			con.add(pramod,RDF.TYPE,FOAF.PERSON);
			con.add(pramod,RDFS.LABEL,f.createLiteral("Pramod", XMLSchema.STRING));
			
			//Retrieving the data back from the repository
			RepositoryResult<Statement> statements = con.getStatements(null, null, null, true);
			Model model = Iterations.addAll(statements, new LinkedHashModel());
			
			model.setNamespace("rdf", RDF.NAMESPACE);
			model.setNamespace("RDFS",RDFS.NAMESPACE);
			model.setNamespace("xsd",XMLSchema.NAMESPACE);
			model.setNamespace("foal",FOAF.NAMESPACE);
			model.setNamespace("ex",namespace);
			
			Rio.write(model,System.out,RDFFormat.TURTLE);
			
			
			
		}
		finally
		{
			con.close();
		}
		
		
	}

}
